#include <iostream>
#include <iomanip>
#include <vector>
#include <list>
#include <string>
#include <algorithm>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <ctime>
#include <chrono>

using namespace std;
using namespace std::chrono;

struct Studentas {
    string var;
    string pav;
    vector<int> paz;
    int egz{};
    double gal_vid{};
    double gal_med{};
};

// mediana
double mediana(vector<int> paz) {
    if (paz.empty()) return 0.0;
    sort(paz.begin(), paz.end());
    int n = paz.size();
    if (n % 2 == 0)
        return (paz[n / 2 - 1] + paz[n / 2]) / 2.0;
    else
        return paz[n / 2];
}

// skaitymas iš failo
template <typename Container>
Container skaitytiIsFailo(const string& failo_pav) {
    Container studentai;
    ifstream fin(failo_pav);
    if (!fin) {
        cout << "Nepavyko atidaryti failo: " << failo_pav << endl;
        return studentai;
    }

    string header;
    getline(fin, header);
    stringstream ss(header);
    string zodis;
    vector<string> stulpeliai;
    while (ss >> zodis) stulpeliai.push_back(zodis);
    int nd_kiekis = stulpeliai.size() - 3;

    while (true) {
        Studentas s;
        int sum = 0;
        fin >> s.var >> s.pav;
        if (fin.fail()) break;

        int pazymys;
        for (int i = 0; i < nd_kiekis; i++) {
            fin >> pazymys;
            if (fin.fail()) break;
            s.paz.push_back(pazymys);
            sum += pazymys;
        }

        fin >> s.egz;
        if (fin.fail()) break;

        if (!s.paz.empty())
            s.gal_vid = double(sum) / s.paz.size() * 0.4 + s.egz * 0.6;
        else s.gal_vid = s.egz;

        s.gal_med = mediana(s.paz) * 0.4 + s.egz * 0.6;

        studentai.push_back(s);
    }
    fin.close();
    return studentai;
}

// rodyti rezultatus + rūšiavimas + failai
template <typename Container>
void rodytiRezultatus(Container& studentai) {
    studentai.sort([](const Studentas& a, const Studentas& b){ return a.pav < b.pav; });

    int pasirinkimas;
    cout << "Pasirinkite galutinio balo skaiciavimo metoda: \n1 - Vidurkis\n2 - Mediana\n3 - Abu\n";
    cin >> pasirinkimas;

    cout << fixed << setprecision(2);

    if (pasirinkimas == 1) cout << left << setw(15) << "Vardas" << "|" << setw(20) << "Pavarde" << "|" << setw(18) << "Galutinis (Vid.)\n";
    else if (pasirinkimas == 2) cout << left << setw(15) << "Vardas" << "|" << setw(20) << "Pavarde" << "|" << setw(18) << "Galutinis (Med.)\n";
    else cout << left << setw(15) << "Vardas" << "|" << setw(20) << "Pavarde" << "|" << setw(18) << "Galutinis (Vid.)" << "|" << setw(18) << "Galutinis (Med.)\n";

    cout << string(80, '-') << endl;

    for (auto& s : studentai) {
        cout << left << setw(15) << s.var << "|" << setw(20) << s.pav << "|";
        if (pasirinkimas == 1) cout << setw(18) << s.gal_vid << endl;
        else if (pasirinkimas == 2) cout << setw(18) << s.gal_med << endl;
        else cout << setw(18) << s.gal_vid << "|" << setw(18) << s.gal_med << endl;
    }

    // rūšiavimas į grupes
    auto start_sort = high_resolution_clock::now();
    Container vargsiukai, kietiakiai;
    for (auto& s : studentai) {
        if (s.gal_vid < 5.0) vargsiukai.push_back(s);
        else kietiakiai.push_back(s);
    }
    auto end_sort = high_resolution_clock::now();

    // įrašymas į failus
    auto start_write = high_resolution_clock::now();
    ofstream fout1("vargsiukai.txt"), fout2("kietiakiai.txt");
    fout1 << left << setw(15) << "Vardas" << setw(20) << "Pavarde" << setw(18) << "Galutinis (Vid.)\n";
    fout2 << left << setw(15) << "Vardas" << setw(20) << "Pavarde" << setw(18) << "Galutinis (Vid.)\n";

    for (auto& s : vargsiukai) fout1 << left << setw(15) << s.var << setw(20) << s.pav << s.gal_vid << endl;
    for (auto& s : kietiakiai) fout2 << left << setw(15) << s.var << setw(20) << s.pav << s.gal_vid << endl;
    auto end_write = high_resolution_clock::now();

    cout << "\nRūšiavimo laikas: " << duration_cast<duration<double>>(end_sort-start_sort).count() << " s\n";
    cout << "Failų įrašymo laikas: " << duration_cast<duration<double>>(end_write-start_write).count() << " s\n";
    cout << "Sugeneruoti failai: vargsiukai.txt ir kietiakiai.txt\n";
}

int main() {
    srand(time(0));
    int veiksmas;
    cout << "Pasirinkite veiksma:\n1 - Nuskaityti duomenis\n2 - Palyginti vector ir list veikimo greiti\n";
    cin >> veiksmas;

    if (veiksmas == 1) {
        auto start_v = high_resolution_clock::now();
        vector<Studentas> studentai_v = skaitytiIsFailo<vector<Studentas>>("kursiokai.txt");
        auto end_v = high_resolution_clock::now();
        cout << "Vector skaitymo laikas: " << duration_cast<duration<double>>(end_v-start_v).count() << " s\n";
        rodytiRezultatus(studentai_v);
    }
    else if (veiksmas == 2) {
        auto start_v = high_resolution_clock::now();
        vector<Studentas> studentai_v = skaitytiIsFailo<vector<Studentas>>("kursiokai.txt");
        auto end_v = high_resolution_clock::now();

        auto start_l = high_resolution_clock::now();
        list<Studentas> studentai_l = skaitytiIsFailo<list<Studentas>>("kursiokai.txt");
        auto end_l = high_resolution_clock::now();

        cout << fixed << setprecision(4);
        cout << "\n-----------------------------\n";
        cout << "| Konteineris | Skaitymo laikas (s) |\n";
        cout << "-----------------------------\n";
        cout << "| vector      | " << setw(18) << duration_cast<duration<double>>(end_v-start_v).count() << " |\n";
        cout << "| list        | " << setw(18) << duration_cast<duration<double>>(end_l-start_l).count() << " |\n";
        cout << "-----------------------------\n";

        cout << "\nVector rezultatai:\n";
        rodytiRezultatus(studentai_v);
        cout << "\nList rezultatai:\n";
        rodytiRezultatus(studentai_l);
    }

    return 0;
}
