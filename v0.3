else if (veiksmas == 5) {
    cout << "Testuojamas konteineriu veikimo greitis (vector vs list)...\n";

    // --- 1. Duomenu nuskaitymas ---
    auto start_v = high_resolution_clock::now();
    auto studentai_v = skaitytiIsFailo<vector<Studentas>>("kursiokai.txt");
    auto end_v = high_resolution_clock::now();
    double laikas_vector_nuskaitymas = duration_cast<duration<double>>(end_v - start_v).count();

    auto start_l = high_resolution_clock::now();
    auto studentai_l = skaitytiIsFailo<list<Studentas>>("kursiokai.txt");
    auto end_l = high_resolution_clock::now();
    double laikas_list_nuskaitymas = duration_cast<duration<double>>(end_l - start_l).count();

    // --- 2. Skirstymas i dvi grupes ---
    auto start_v2 = high_resolution_clock::now();
    vector<Studentas> vargsiukai_v, kietiakiai_v;
    for (auto& s : studentai_v) {
        if (s.gal_vid < 5.0) vargsiukai_v.push_back(s);
        else kietiakiai_v.push_back(s);
    }
    auto end_v2 = high_resolution_clock::now();
    double laikas_vector_skirstymas = duration_cast<duration<double>>(end_v2 - start_v2).count();

    auto start_l2 = high_resolution_clock::now();
    list<Studentas> vargsiukai_l, kietiakiai_l;
    for (auto& s : studentai_l) {
        if (s.gal_vid < 5.0) vargsiukai_l.push_back(s);
        else kietiakiai_l.push_back(s);
    }
    auto end_l2 = high_resolution_clock::now();
    double laikas_list_skirstymas = duration_cast<duration<double>>(end_l2 - start_l2).count();

    // --- 3. Failu irasymas ---
    auto start_v3 = high_resolution_clock::now();
    ofstream fout1("vargsiukai_vector.txt"), fout2("kietiakiai_vector.txt");
    fout1 << left << setw(15) << "Vardas" << setw(20) << "Pavarde" << setw(18) << "Galutinis(Vid.)" << endl;
    fout2 << left << setw(15) << "Vardas" << setw(20) << "Pavarde" << setw(18) << "Galutinis(Vid.)" << endl;
    for (auto& s : vargsiukai_v) fout1 << left << setw(15) << s.var << setw(20) << s.pav << s.gal_vid << endl;
    for (auto& s : kietiakiai_v) fout2 << left << setw(15) << s.var << setw(20) << s.pav << s.gal_vid << endl;
    fout1.close(); fout2.close();
    auto end_v3 = high_resolution_clock::now();
    double laikas_vector_irasymas = duration_cast<duration<double>>(end_v3 - start_v3).count();

    auto start_l3 = high_resolution_clock::now();
    ofstream fout3("vargsiukai_list.txt"), fout4("kietiakiai_list.txt");
    fout3 << left << setw(15) << "Vardas" << setw(20) << "Pavarde" << setw(18) << "Galutinis(Vid.)" << endl;
    fout4 << left << setw(15) << "Vardas" << setw(20) << "Pavarde" << setw(18) << "Galutinis(Vid.)" << endl;
    for (auto& s : vargsiukai_l) fout3 << left << setw(15) << s.var << setw(20) << s.pav << s.gal_vid << endl;
    for (auto& s : kietiakiai_l) fout4 << left << setw(15) << s.var << setw(20) << s.pav << s.gal_vid << endl;
    fout3.close(); fout4.close();
    auto end_l3 = high_resolution_clock::now();
    double laikas_list_irasymas = duration_cast<duration<double>>(end_l3 - start_l3).count();

    // --- 4. Rezultatu lentele ---
    cout << fixed << setprecision(4);
    cout << "\n-----------------------------------------------\n";
    cout << "| Konteineris | Nuskaitymas | Skirstymas | Įrašymas |\n";
    cout << "-----------------------------------------------\n";
    cout << "| vector      | " << setw(11) << laikas_vector_nuskaitymas 
         << " | " << setw(10) << laikas_vector_skirstymas
         << " | " << setw(9) << laikas_vector_irasymas << " |\n";
    cout << "| list        | " << setw(11) << laikas_list_nuskaitymas 
         << " | " << setw(10) << laikas_list_skirstymas
         << " | " << setw(9) << laikas_list_irasymas << " |\n";
    cout << "-----------------------------------------------\n";

    cout << "\nSugeneruoti failai: vargsiukai_vector.txt, kietiakiai_vector.txt, vargsiukai_list.txt, kietiakiai_list.txt\n";
}


